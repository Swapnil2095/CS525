
Already given -
storage_mgr.h -> copied as it is 

We ahve to define
dberror.h -> exception handling in our programs (RC) 
          -> define error types 
test_helper.h -> test cases checking pupose


We have to code 
dberror.c -> print various error messages defined in dberror.h

storage_mgr.c -> implement gievn interface here (coding and our logic)
 
test_assign1_1.c -> invoke storage mgr from here and test our cases    



My logic is -

1)For manupulating page file -
 
extern void initStorageManager (void);
basic version -just print message storage manager initialised
advance version-check memory availability

extern RC createPageFile (char *fileName); 
basic- open new file -> add number of pages at start with string (as page_size=string_size=2048)

should i take page_size= 4096 instead (What difference it make? Does it break my code in future?)

root@swapnil:~#  getconf PAGE_SIZE
4096

advance – handle memory not available senario


extern RC openPageFile (char *fileName, SM_FileHandle *fHandle); 
basic- filling all info for  SM_FileHandle
for struct SM_FileHandle 
char *fileName=fileName; 
int totalNumPages=atoi(first string info from file); 
int curPagePos=0; 
void *mgmtInfo= file pointer;

advance- error handling

extern RC closePageFile (SM_FileHandle *fHandle); 
basic – close file(mgmtInfo->file pointer)

advance – error handling

extern RC destroyPageFile (char *fileName); 
basic – remove file(file pointer)

advance – error handling



2)reading blocks from disc  - working 

extern RC readBlock (int pageNum, SM_FileHandle *fHandle, SM_PageHandle memPage);
Basic – checking for validity of page ad then reading it from  memPage
  
Need addtional info or help
which are the function I can use here to write data to memPage 
I used fread function for it 
Is it ok? Or required to use different?
 

extern int getBlockPos (SM_FileHandle *fHandle); 
Basic –  return fHandle->curPagePos


extern RC readFirstBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 
Basic - using  readBlock function
        return readBlock(0, fHandle, memPage)


extern RC readPreviousBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 
Basic - using  readBlock function
        return readBlock(fHandle->curPagePos-1, fHandle, memPage)


extern RC readCurrentBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 
Basic – using  readBlock function
        return readBlock(fHandle->curPagePos, fHandle, memPage)


extern RC readNextBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 
Basic - using  readBlock function
        return readBlock(fHandle->curPagePos+1, fHandle, memPage)


extern RC readLastBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 
Basic - using  readBlock function
        return readBlock(fHandle->totalNumPages, fHandle, memPage)



3)writing blocks to a page file  - working 
extern RC writeBlock (int pageNum, SM_FileHandle *fHandle, SM_PageHandle memPage); 

extern RC writeCurrentBlock (SM_FileHandle *fHandle, SM_PageHandle memPage); 

extern RC appendEmptyBlock (SM_FileHandle *fHandle); 

extern RC ensureCapacity (int numberOfPages, SM_FileHandle *fHandle); 



Some help regarding error messages and  test senarios 

Please i don’t get good understanding regarding error handling. 
Please guide me in that.
Please suggest some additional test cases need to be handle.

Also, please correct me if I am going wrong in any point in this plan.
